import openai
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

# Load environment variables
load_dotenv()

# API keys
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
openai.api_key = OPENAI_API_KEY

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º! \n\n"
        "‚úÖ –†–∞—Å–º–∏–π ELGA TAXI –º–æ–±–∏–ª –∏–ª–æ–≤–∞—Å–∏–Ω–∏ —é–∫–ª–∞–± –æ–ª–∏–Ω–≥ –≤–∞ –±—É—é—Ä—Ç–º–∞–Ω–∏ –∏–ª–æ–≤–∞ –æ—Ä“õ–∞–ª–∏ —Ç–µ–∑—Ä–æ–∫ –±–µ—Ä–∏–Ω–≥!\n"
        "üì≤ https://play.google.com/store/apps/details?id=uz.teamwork.elgataxi\n\n"
        "‚úÖ –¢–µ–∑–∫–æ—Ä –µ—Ç–∫–∞–∑–∏—à\n"
        "‚úÖ –•–∞–≤—Ñ—Å–∏–∑ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä\n"
        "‚úÖ 24/7 —Ö–∏–∑–º–∞—Ç"
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –Å—Ä–¥–∞–º —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ –±—É–π—Ä—É“õ–ª–∞—Ä–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥:\n\n"
        "/start - –ë–æ—Ç–Ω–∏ –±–æ—à–ª–∞—à\n"
        "/app - –ò–ª–æ–≤–∞–Ω–∏ —é–∫–ª–∞—à\n"
        "/info - –ë–∏–∑ “≥–∞“õ–∏–º–∏–∑–¥–∞\n"
        "/call - –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à\n"
        "/partner - “≤–∞–º–∫–æ—Ä–ª–∏–∫ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏"
    )

# /app
async def app_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì≤ ELGA TAXI –º–æ–±–∏–ª –∏–ª–æ–≤–∞—Å–∏–Ω–∏ —é–∫–ª–∞–± –æ–ª–∏–Ω–≥:\n"
        "https://play.google.com/store/apps/details?id=uz.teamwork.elgataxi"
    )

# /info
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ë–∏–∑ “≥–∞“õ–∏–º–∏–∑–¥–∞:\n"
        "ELGA TAXI ‚Äî –±—É –æ–Ω–ª–∞–π–Ω —Ç–∞–∫—Å–∏ –±—É—é—Ä—Ç–º–∞ –±–µ—Ä–∏—à –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Å–∏ –±—û–ª–∏–±, "
        "—é“õ–æ—Ä–∏ —Ç–µ–∑–ª–∏–∫–¥–∞–≥–∏ —Ö–∏–∑–º–∞—Ç, —Ö–∞–≤—Ñ—Å–∏–∑ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –≤–∞ “õ—É–ª–∞–π –º–æ–±–∏–ª –∏–ª–æ–≤–∞ —Ç–∞–∫–ª–∏—Ñ —ç—Ç–∞–¥–∏."
    )

# /call
async def call_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à:\n"
        "“ö–∏—Å“õ–∞ —Ä–∞“õ–∞–º: 1226\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +998 77 064 12 26"
    )

# /partner
async def partner_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ù “≤–∞–º–∫–æ—Ä–ª–∏–∫ —Ç–∞–∫–ª–∏—Ñ–∏:\n\n"
        "–°–∏–∑–Ω–∏–Ω–≥ “≥—É–¥—É–¥–∏–Ω–≥–∏–∑–¥–∞ ELGA TAXI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Å–∏–Ω–∏ –∏—à–≥–∞ —Ç—É—à–∏—Ä–º–æ“õ—á–∏–º–∏—Å–∏–∑?\n"
        "–Å–∫–∏ —Ç–∞–π—ë—Ä IT –µ—á–∏–º–Ω–∏ —Ö–∞—Ä–∏–¥ “õ–∏–ª–∏–±, —û–∑ –±—Ä–µ–Ω–¥–∏–Ω–≥–∏–Ω–≥–∏–∑ –±–∏–ª–∞–Ω –±–æ—à–ª–∞–º–æ“õ—á–∏–º–∏—Å–∏–∑?\n\n"
        "üì© –ë–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥:\n"
        "Telegram: @elgataxisupport\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +998 77 064 12 26\n"
        "Email: elgataxi@support.uz"
    )

# AI –∂–∞–≤–æ–±
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–°–∏–∑ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä—É–≤—á–∏ AI —ë—Ä–¥–∞–º—á–∏—Å–∏–∑."},
                {"role": "user", "content": user_message}
            ]
        )
        answer = response.choices[0].message.content
    except Exception as e:
        answer = "–ö–µ—á–∏—Ä–∞—Å–∏–∑, “≥–æ–∑–∏—Ä—á–∞ AI –∂–∞–≤–æ–± –±–µ—Ä–∞ –æ–ª–º–∞–¥–∏."

    await update.message.reply_text(answer)

# Bot runner
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # Command handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("app", app_command))
    app.add_handler(CommandHandler("info", info_command))
    app.add_handler(CommandHandler("call", call_command))
    app.add_handler(CommandHandler("partner", partner_command))

    # Text handler
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    # Run bot
    app.run_polling()
